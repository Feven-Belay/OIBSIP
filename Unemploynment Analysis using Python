{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOqo6ehQw878lxRLAJ6/OfH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Feven-Belay/OIBSIP/blob/main/Unemploynment%20Analysis%20using%20Python\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# UNEMPLOYMENT ANALYSIS WITH PYTHON\n",
        "\n",
        "Unemployment is measured by the unemployment rate which is the number of people\n",
        "who are unemployed as a percentage of the total labour force. We have seen a sharp\n",
        "increase in the unemployment rate during Covid-19, so analyzing the unemployment rate\n",
        "can be a good data science project.\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "kvqbJi2lxKkp"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Business/Data Understanding\n",
        "\n",
        "Objective: Analyze the unemployment rate in India, focusing on the period during the COVID-19 pandemic, to understand the impact on different regions and provide actionable insights for policymakers and stakeholders.\n",
        "\n",
        "Key Business Questions:\n",
        "- How did the unemployment rate change during the COVID-19 pandemic in different regions of India?\n",
        "- Which regions were most affected by unemployment during the pandemic?\n",
        "- What are the trends and patterns in unemployment rates over time?\n",
        "- How does the unemployment rate correlate with other economic indicators such as the estimated number of employed individuals and the labor participation rate?\n",
        "- What recommendations can be made to mitigate the impact of unemployment in future crises?\n",
        "\n",
        "\n",
        "Stakeholders:\n",
        "- Government and policymakers\n",
        "- Economists and researchers\n",
        "- Employment and labor organizations\n",
        "- Businesses and investors\n",
        "- General public\n",
        "\n",
        "\n",
        "Dataset 1: Unemployment in India\n",
        "- Columns:\n",
        "- Region: The region in India (e.g., Andhra Pradesh).\n",
        "- Date: The date of the data entry.\n",
        "- Frequency: The frequency of the data (e.g., Monthly).\n",
        "- Estimated Unemployment Rate (%): The estimated unemployment rate as a percentage.\n",
        "- Estimated Employed: The estimated number of employed individuals.\n",
        "- Estimated Labour Participation Rate (%): The estimated labor participation rate as a percentage.\n",
        "- Area: The area type (e.g., Rural).\n",
        "\n",
        "Dataset 2: Unemployment Rate up to 11_2020\n",
        "Columns:\n",
        "- Region: The region in India.\n",
        "- Date: The date of the data entry.\n",
        "- Frequency: The frequency of the data.\n",
        "- Estimated Unemployment Rate (%): The estimated unemployment rate as a percentage.\n",
        "- Estimated Employed: The estimated number of employed individuals.\n",
        "- Estimated Labour Participation Rate (%): The estimated labor participation rate as a percentage.\n",
        "- Region.1: Region categorization (e.g., South).\n",
        "- longitude: Longitude of the region.\n",
        "- latitude: Latitude of the region.\n"
      ],
      "metadata": {
        "id": "6JFWV2WyxKSJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ],
      "metadata": {
        "id": "0ivoFiB5NRQL"
      },
      "execution_count": 268,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load datasets\n",
        "df1 = pd.read_csv('/content/Unemployment in India.csv')\n",
        "df2 = pd.read_csv('/content/Unemployment_Rate_upto_11_2020.csv')"
      ],
      "metadata": {
        "id": "cXqqCEgqNRNk"
      },
      "execution_count": 269,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Strip leading and trailing spaces from column names\n",
        "df1.columns = df1.columns.str.strip()\n",
        "df2.columns = df2.columns.str.strip()"
      ],
      "metadata": {
        "id": "NELu-bgJNRLf"
      },
      "execution_count": 270,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Strip leading and trailing spaces from date values\n",
        "df1['Date'] = df1['Date'].str.strip()\n",
        "df2['Date'] = df2['Date'].str.strip()"
      ],
      "metadata": {
        "id": "ARLF5qzmNRJJ"
      },
      "execution_count": 271,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert 'Date' columns to datetime format\n",
        "df1['Date'] = pd.to_datetime(df1['Date'], format='%d-%m-%Y')\n",
        "df2['Date'] = pd.to_datetime(df2['Date'], format='%d-%m-%Y')"
      ],
      "metadata": {
        "id": "Csd8jTg3NRD-"
      },
      "execution_count": 272,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Explore datasets\n",
        "print(\"Dataset 1 info:\")\n",
        "df1.info()\n",
        "print(\"\\nDataset 2 info:\")\n",
        "df2.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pkTtMaocNZ0l",
        "outputId": "f03afbe6-250c-4575-a564-89f3025c78e8"
      },
      "execution_count": 273,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset 1 info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 768 entries, 0 to 767\n",
            "Data columns (total 7 columns):\n",
            " #   Column                                   Non-Null Count  Dtype         \n",
            "---  ------                                   --------------  -----         \n",
            " 0   Region                                   740 non-null    object        \n",
            " 1   Date                                     740 non-null    datetime64[ns]\n",
            " 2   Frequency                                740 non-null    object        \n",
            " 3   Estimated Unemployment Rate (%)          740 non-null    float64       \n",
            " 4   Estimated Employed                       740 non-null    float64       \n",
            " 5   Estimated Labour Participation Rate (%)  740 non-null    float64       \n",
            " 6   Area                                     740 non-null    object        \n",
            "dtypes: datetime64[ns](1), float64(3), object(3)\n",
            "memory usage: 42.1+ KB\n",
            "\n",
            "Dataset 2 info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 267 entries, 0 to 266\n",
            "Data columns (total 9 columns):\n",
            " #   Column                                   Non-Null Count  Dtype         \n",
            "---  ------                                   --------------  -----         \n",
            " 0   Region                                   267 non-null    object        \n",
            " 1   Date                                     267 non-null    datetime64[ns]\n",
            " 2   Frequency                                267 non-null    object        \n",
            " 3   Estimated Unemployment Rate (%)          267 non-null    float64       \n",
            " 4   Estimated Employed                       267 non-null    int64         \n",
            " 5   Estimated Labour Participation Rate (%)  267 non-null    float64       \n",
            " 6   Region.1                                 267 non-null    object        \n",
            " 7   longitude                                267 non-null    float64       \n",
            " 8   latitude                                 267 non-null    float64       \n",
            "dtypes: datetime64[ns](1), float64(4), int64(1), object(3)\n",
            "memory usage: 18.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Check for missing values\n",
        "print(\"\\nMissing values in Dataset 1:\")\n",
        "print(df1.isnull().sum())\n",
        "print(\"\\nMissing values in Dataset 2:\")\n",
        "print(df2.isnull().sum())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BKwbmDKo9gT5",
        "outputId": "d9182058-456f-43f1-b241-7adb089e0133"
      },
      "execution_count": 274,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Missing values in Dataset 1:\n",
            "Region                                     28\n",
            "Date                                       28\n",
            "Frequency                                  28\n",
            "Estimated Unemployment Rate (%)            28\n",
            "Estimated Employed                         28\n",
            "Estimated Labour Participation Rate (%)    28\n",
            "Area                                       28\n",
            "dtype: int64\n",
            "\n",
            "Missing values in Dataset 2:\n",
            "Region                                     0\n",
            "Date                                       0\n",
            "Frequency                                  0\n",
            "Estimated Unemployment Rate (%)            0\n",
            "Estimated Employed                         0\n",
            "Estimated Labour Participation Rate (%)    0\n",
            "Region.1                                   0\n",
            "longitude                                  0\n",
            "latitude                                   0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2. Merging and Data Cleaning\n",
        "\n",
        "Since the goal is to compare unemployment rates between 2019 and 2020, we should avoid merging on the Date column because it can lead to data loss or incorrect matches. Instead, we calculate average unemployment rates for each region separately for 2019 and 2020, and then merge on Region."
      ],
      "metadata": {
        "id": "KoZ53vnD9nxv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Extract data for the years 2019 and 2020\n",
        "df_2019 = df1[df1['Date'].dt.year == 2019]\n",
        "df_2020 = df2[df2['Date'].dt.year == 2020]"
      ],
      "metadata": {
        "id": "WW3zBKhQNgOu"
      },
      "execution_count": 275,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the average unemployment rate for each region in 2019\n",
        "avg_unemployment_2019 = df_2019.groupby('Region')['Estimated Unemployment Rate (%)'].mean().reset_index()\n",
        "avg_unemployment_2019.columns = ['Region', 'Avg Unemployment Rate 2019']"
      ],
      "metadata": {
        "id": "-T5NHI_zNgKC"
      },
      "execution_count": 276,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the average unemployment rate for each region in 2020\n",
        "avg_unemployment_2020 = df_2020.groupby('Region')['Estimated Unemployment Rate (%)'].mean().reset_index()\n",
        "avg_unemployment_2020.columns = ['Region', 'Avg Unemployment Rate 2020']"
      ],
      "metadata": {
        "id": "BNqXfvV9NgGZ"
      },
      "execution_count": 277,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Merge the two dataframes on 'Region'\n",
        "avg_unemployment = pd.merge(avg_unemployment_2019, avg_unemployment_2020, on='Region', how='outer')"
      ],
      "metadata": {
        "id": "KMXZenmlNgED"
      },
      "execution_count": 278,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fill NaN values with 0 (if there are regions that don't have data for both years)\n",
        "avg_unemployment.fillna(0, inplace=True)"
      ],
      "metadata": {
        "id": "ogHm_HVVNgBv"
      },
      "execution_count": 279,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort by average unemployment rate in 2020 and 2019\n",
        "avg_unemployment.sort_values(by=['Avg Unemployment Rate 2020', 'Avg Unemployment Rate 2019'], ascending=False, inplace=True)"
      ],
      "metadata": {
        "id": "WhzThCuFNf-m"
      },
      "execution_count": 280,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the results\n",
        "avg_unemployment\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 927
        },
        "id": "4gcZCCm39vOk",
        "outputId": "a9c695dd-2c43-4304-f56b-444057c848d9"
      },
      "execution_count": 283,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Region  Avg Unemployment Rate 2019  Avg Unemployment Rate 2020\n",
              "8            Haryana                   22.798750                   27.477000\n",
              "24           Tripura                   28.363125                   25.055000\n",
              "11         Jharkhand                   14.233750                   19.539000\n",
              "2              Bihar                   13.882500                   19.471000\n",
              "5              Delhi                   13.750625                   18.414000\n",
              "18        Puducherry                    1.699375                   17.942000\n",
              "10   Jammu & Kashmir                   16.141667                   16.477778\n",
              "9   Himachal Pradesh                   19.064375                   16.065000\n",
              "20         Rajasthan                   12.301250                   15.868000\n",
              "22        Tamil Nadu                    3.063750                   12.187000\n",
              "6                Goa                    9.346250                   12.167000\n",
              "19            Punjab                   10.882500                   11.981000\n",
              "26       Uttarakhand                    5.800625                   11.156000\n",
              "27       West Bengal                    6.625625                   10.192000\n",
              "21            Sikkim                    6.257273                    9.792500\n",
              "25     Uttar Pradesh                   10.888125                    9.737000\n",
              "13            Kerala                    7.131250                    9.434000\n",
              "0     Andhra Pradesh                    4.826875                    8.664000\n",
              "15       Maharashtra                    5.459375                    7.979000\n",
              "4       Chhattisgarh                    7.346875                    7.819000\n",
              "12         Karnataka                    3.238750                    7.668000\n",
              "14    Madhya Pradesh                    4.788125                    6.854000\n",
              "23         Telangana                    4.115625                    6.833000\n",
              "17            Odisha                    3.661250                    6.462000\n",
              "7            Gujarat                    4.979375                    6.376000\n",
              "1              Assam                    6.420667                    4.856000\n",
              "16         Meghalaya                    4.012500                    3.866000\n",
              "3         Chandigarh                   15.822500                    0.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eff81de4-6543-4129-a389-c2eb36762e2f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Region</th>\n",
              "      <th>Avg Unemployment Rate 2019</th>\n",
              "      <th>Avg Unemployment Rate 2020</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Haryana</td>\n",
              "      <td>22.798750</td>\n",
              "      <td>27.477000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>Tripura</td>\n",
              "      <td>28.363125</td>\n",
              "      <td>25.055000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>Jharkhand</td>\n",
              "      <td>14.233750</td>\n",
              "      <td>19.539000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Bihar</td>\n",
              "      <td>13.882500</td>\n",
              "      <td>19.471000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Delhi</td>\n",
              "      <td>13.750625</td>\n",
              "      <td>18.414000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>Puducherry</td>\n",
              "      <td>1.699375</td>\n",
              "      <td>17.942000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Jammu &amp; Kashmir</td>\n",
              "      <td>16.141667</td>\n",
              "      <td>16.477778</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Himachal Pradesh</td>\n",
              "      <td>19.064375</td>\n",
              "      <td>16.065000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>Rajasthan</td>\n",
              "      <td>12.301250</td>\n",
              "      <td>15.868000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>Tamil Nadu</td>\n",
              "      <td>3.063750</td>\n",
              "      <td>12.187000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>Goa</td>\n",
              "      <td>9.346250</td>\n",
              "      <td>12.167000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>Punjab</td>\n",
              "      <td>10.882500</td>\n",
              "      <td>11.981000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>Uttarakhand</td>\n",
              "      <td>5.800625</td>\n",
              "      <td>11.156000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>West Bengal</td>\n",
              "      <td>6.625625</td>\n",
              "      <td>10.192000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>Sikkim</td>\n",
              "      <td>6.257273</td>\n",
              "      <td>9.792500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>Uttar Pradesh</td>\n",
              "      <td>10.888125</td>\n",
              "      <td>9.737000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>Kerala</td>\n",
              "      <td>7.131250</td>\n",
              "      <td>9.434000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Andhra Pradesh</td>\n",
              "      <td>4.826875</td>\n",
              "      <td>8.664000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>Maharashtra</td>\n",
              "      <td>5.459375</td>\n",
              "      <td>7.979000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Chhattisgarh</td>\n",
              "      <td>7.346875</td>\n",
              "      <td>7.819000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Karnataka</td>\n",
              "      <td>3.238750</td>\n",
              "      <td>7.668000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>Madhya Pradesh</td>\n",
              "      <td>4.788125</td>\n",
              "      <td>6.854000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>Telangana</td>\n",
              "      <td>4.115625</td>\n",
              "      <td>6.833000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>Odisha</td>\n",
              "      <td>3.661250</td>\n",
              "      <td>6.462000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Gujarat</td>\n",
              "      <td>4.979375</td>\n",
              "      <td>6.376000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Assam</td>\n",
              "      <td>6.420667</td>\n",
              "      <td>4.856000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>Meghalaya</td>\n",
              "      <td>4.012500</td>\n",
              "      <td>3.866000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Chandigarh</td>\n",
              "      <td>15.822500</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eff81de4-6543-4129-a389-c2eb36762e2f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eff81de4-6543-4129-a389-c2eb36762e2f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eff81de4-6543-4129-a389-c2eb36762e2f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ef91551e-e545-4517-a48d-f85e7c4b509c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ef91551e-e545-4517-a48d-f85e7c4b509c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ef91551e-e545-4517-a48d-f85e7c4b509c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_faa5465d-2dc6-4a67-a556-7407457f802d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('avg_unemployment')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_faa5465d-2dc6-4a67-a556-7407457f802d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('avg_unemployment');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "avg_unemployment",
              "summary": "{\n  \"name\": \"avg_unemployment\",\n  \"rows\": 28,\n  \"fields\": [\n    {\n      \"column\": \"Region\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28,\n        \"samples\": [\n          \"Tamil Nadu\",\n          \"Assam\",\n          \"Rajasthan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Avg Unemployment Rate 2019\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.518541720443282,\n        \"min\": 1.6993749999999999,\n        \"max\": 28.363125,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          3.0637499999999998,\n          6.4206666666666665,\n          12.30125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Avg Unemployment Rate 2020\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.412668611289471,\n        \"min\": 0.0,\n        \"max\": 27.476999999999997,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          12.187,\n          4.856,\n          15.868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 283
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Exploratory Data Analysis (EDA)"
      ],
      "metadata": {
        "id": "JomeRx809zMe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Plotting the average unemployment rates for 2019 and 2020\n",
        "plt.figure(figsize=(14, 8))\n",
        "sns.barplot(x='Avg Unemployment Rate 2019', y='Region', data=avg_unemployment, color='blue', label='2019')\n",
        "sns.barplot(x='Avg Unemployment Rate 2020', y='Region', data=avg_unemployment, color='red', label='2020')\n",
        "plt.title('Average Unemployment Rate by Region for 2019 and 2020')\n",
        "plt.xlabel('Average Unemployment Rate (%)')\n",
        "plt.ylabel('Region')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 718
        },
        "id": "AAqDPaBq92oR",
        "outputId": "cff44b0a-83dd-409f-9ada-c7416558c1fd"
      },
      "execution_count": 282,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Key Observations:\n",
        "\n",
        "1. Overall Increase in Unemployment Rate:\n",
        "\n",
        "The red bars represent the average unemployment rate for 2020, and the blue bars represent the average unemployment rate for 2019.\n",
        "For most regions, the unemployment rate in 2020 (red bars) is significantly higher than in 2019 (blue bars). This indicates a general increase in unemployment across the regions due to the impact of COVID-19.\n",
        "\n",
        "2. Highest Unemployment Rates:\n",
        "\n",
        "Haryana, Tripura, and Jharkhand have the highest average unemployment rates in 2020, with Haryana leading at around 30%.\n",
        "These regions have shown a substantial increase in unemployment from 2019 to 2020.\n",
        "\n",
        "3. Regions with Data for Both Years:\n",
        "\n",
        "Some regions, such as Himachal Pradesh and Assam, have visible blue bars indicating data availability for both 2019 and 2020. For these regions, there is a clear comparison showing an increase in the unemployment rate in 2020.\n",
        "Meghalaya and Chandigarh show significant values in 2019 (blue bars), with a decrease or no data in 2020.\n",
        "\n",
        "4. Regions with High Increase:\n",
        "\n",
        "Delhi, Puducherry, and Jammu & Kashmir also show a considerable increase in unemployment rates from 2019 to 2020.\n",
        "\n",
        "5. Regions with Missing Data:\n",
        "\n",
        "For some regions, there are no blue bars, indicating that the data for 2019 is missing or not available (e.g., Punjab, Uttarakhand, and Gujarat).\n",
        "\n",
        "\n",
        "# Conclusion:\n",
        "\n",
        "The visualization highlights the significant impact of the COVID-19 pandemic on unemployment rates across various regions in India. The general trend shows an increase in unemployment in 2020 compared to 2019, with some regions experiencing more severe impacts than others. This analysis can help policymakers identify which regions were most affected and may require more attention and resources to recover from the economic downturn caused by the pandemic.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "vHC_yjGk7mmU"
      }
    }
  ]
}